//==============================================================================
// Welcome to shader authoring in Meta Spark Studio!
//==============================================================================
precision highp float;

#import <gradients>
#import <sdf>

float easeInSine(float x) {
  return 1.0 - cos((x * 3.141592653) / 2.0);
}

float easeOutSine(float x){
  return sin((x * 3.141592653) / 2.0);
}

// helpers
vec2 rotate(vec2 v, float a) {
  float s = sin(a);
  float c = cos(a);
  mat2 m = mat2(c, s, -s, c);
  return m * v;
}

mat4 rotationMatrix(vec3 axis, float angle) {
  axis = normalize(axis);
  float s = sin(angle);
  float c = cos(angle);
  float oc = 1.0 - c;
  
  return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,
              oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,
              oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,
              0.0,                                0.0,                                0.0,                                1.0);
}

vec3 rotate(vec3 v, vec3 axis, float angle) {
  mat4 m = rotationMatrix(axis, angle);
  return (m * vec4(v, 1.0)).xyz;
}

float toRad (float degrees) {
  return degrees * 0.017453292519943295;
}

float toDegrees (float radians) {
  return radians * 57.29577951308232;
}
// helpers

// data packing stuff
float color2ToValue(vec2 data) {
  return data.x * 255.0 + data.y * 65280.0;
}

vec2 valueToColor2(float value)
{
  float clampedValue = floor(value); // raw is a large int
  float y = floor(clampedValue / 256.0);
  float x = mod(clampedValue, 256.0);

  return vec2(x/255.0, y/255.0);
}

// for custom range remap -8192 ~ 8192
float realToRaw(float realValue)
{
  return (realValue / 2.0 + 0.5) * 65535.0;
}

// data range -1 ~ 1
float rawToReal(float rawValue)
{
  return ((rawValue / 65535.0) - 0.5) * 2.0;
}

// get a value from -1 ~ 1
float unpack2(vec2 color)
{
  return rawToReal(color2ToValue(color.xy));
}

vec2 pack2(float value)
{
  return valueToColor2(realToRaw(value));
}
// data packing stuff


// Entry point of the shader code asset
//
// @param[default=0.0] posDataTexture
void main(
      std::Texture2d posDataTexture,
      std::Texture2d velocityDataTexture,
      std::Texture2d lifeSpeedDataTexture,
      std::Texture2d particleColorTexture,
      vec2 uvOffset,
      vec2 particleSize,
      out vec4 Position,
      out vec4 Color) {

  // grab data
  //FRAGMENT SHADER
  vec2 dataUV = std::getVertexTexCoord() + uvOffset;
  vec4 posData = posDataTexture.sampleLod(dataUV, 1.0);
  vec4 velocityData = velocityDataTexture.sampleLod(dataUV, 1.0);
  vec4 lifeSpeedData = lifeSpeedDataTexture.sampleLod(dataUV, 1.0);

  float lifeNow = lifeSpeedData.x;
  float lifeMax = lifeSpeedData.y;

  // PARTICLE SHAPE
  float lifeRatio = smoothstep(0.0, lifeMax, lifeNow);
  float lifeSizeMultiplier = clamp(lifeRatio / 0.3, 0.0, 1.0);

  vec4 vertexPos = std::getVertexPosition();
  vertexPos.x *= particleSize.x * lifeSizeMultiplier;
  vertexPos.y *= particleSize.y * lifeSizeMultiplier;

  // ROTATION
  vec3 quadUp = vec3(0.0, 1.0, 0.0);
  vec3 velocityDir = normalize(velocityData.xyz);
  vec3 rotationAxis = cross(quadUp, velocityDir);
  float rotationAngle = acos(dot(quadUp, velocityDir));
  
  vertexPos.xyz = rotate(vertexPos.xyz, rotationAxis, rotationAngle);

  // POSITION
  vertexPos.xyz += posData.xyz;
  

  Position = std::getModelViewProjectionMatrix() * vertexPos;
  Color = vec4(dataUV.x, dataUV.y, 1.0, 1.0);
}
