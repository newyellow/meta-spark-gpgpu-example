//==============================================================================
// Welcome to shader authoring in Meta Spark Studio!
//==============================================================================
precision highp float;

#import <gradients>
#import <sdf>

float easeInSine(float x) {
  return 1.0 - cos((x * 3.141592653) / 2.0);
}

float random (vec2 st) {
  return fract(sin(dot(st.xy,
                       vec2(12.9898,78.233)))*
      43758.5453123);
}

// helpers
vec2 rotate(vec2 v, float a) {
  float s = sin(a);
  float c = cos(a);
  mat2 m = mat2(c, s, -s, c);
  return m * v;
}

mat4 rotationMatrix(vec3 axis, float angle) {
  axis = normalize(axis);
  float s = sin(angle);
  float c = cos(angle);
  float oc = 1.0 - c;
  
  return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,
              oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,
              oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,
              0.0,                                0.0,                                0.0,                                1.0);
}

vec3 rotate(vec3 v, vec3 axis, float angle) {
  mat4 m = rotationMatrix(axis, angle);
  return (m * vec4(v, 1.0)).xyz;
}

float toRad(float degrees) {
  return degrees * 0.017453292519943295;
}

float toDegrees(float radians) {
  return radians * 57.29577951308232;
}
// helpers

// noise stuff
vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
     return mod289(((x*34.0)+1.0)*x);
}

vec4 taylorInvSqrt(vec4 r) {
  return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(vec3 v)
{
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //   x0 = x0 - 0.0 + 0.0 * C.xxx;
  //   x1 = x0 - i1  + 1.0 * C.xxx;
  //   x2 = x0 - i2  + 2.0 * C.xxx;
  //   x3 = x0 - 1.0 + 3.0 * C.xxx;
  vec3 x1 = x0 - i1 + C.xxx;
  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

// Permutations
  i = mod289(i);
  vec4 p = permute( permute( permute(
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients: 7x7 points over a square, mapped onto an octahedron.
// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
  float n_ = 0.142857142857; // 1.0/7.0
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),
                                dot(p2,x2), dot(p3,x3) ) );
}

vec3 snoiseVec3( vec3 x ){
  float s  = snoise(vec3( x ));
  float s1 = snoise(vec3( x.y - 19.1 , x.z + 33.4 , x.x + 47.2 ));
  float s2 = snoise(vec3( x.z + 74.2 , x.x - 124.5 , x.y + 99.4 ));
  vec3 c = vec3( s , s1 , s2 );
  return c;  
}
  

vec3 curlNoise( vec3 p ){
  const float e = .1;
  vec3 dx = vec3( e   , 0.0 , 0.0 );
  vec3 dy = vec3( 0.0 , e   , 0.0 );
  vec3 dz = vec3( 0.0 , 0.0 , e   );
  
  vec3 p_x0 = snoiseVec3( p - dx );
  vec3 p_x1 = snoiseVec3( p + dx );
  vec3 p_y0 = snoiseVec3( p - dy );
  vec3 p_y1 = snoiseVec3( p + dy );
  vec3 p_z0 = snoiseVec3( p - dz );
  vec3 p_z1 = snoiseVec3( p + dz );
  
  float x = p_y1.z - p_y0.z - p_z1.y + p_z0.y;
  float y = p_z1.x - p_z0.x - p_x1.z + p_x0.z;
  float z = p_x1.y - p_x0.y - p_y1.x + p_y0.x;
  
  const float divisor = 1.0 / ( 2.0 * e );
  return normalize( vec3( x , y , z ) * divisor );  
}
// noise stuff

// Entry point of the shader code asset
//
// @param[default=0.0] posDataTexture
// @param[default=0.0] velocityDataTexture
// @param[default=0.0] lifeSpeedDataTexture
// @param[default=0] spawnShapeType
// @param[default=0] spawnSizeValues
// @param[default=0] spawnThicknessRatio
// @param[default=0] particleLifeRange
// @param[default=0] particleNoiseScale
// @param[default=0] flowFieldsChangingSpeed
// @param[default=0] moveSpeedScaler
// @param[default=0] runTime
// @param[default=0] deltaTime
void main(
    std::Texture2d posDataTexture,
    std::Texture2d velocityDataTexture,
    std::Texture2d lifeSpeedDataTexture,
    int spawnShapeType,
    vec2 spawnSizeValues,
    float spawnThicknessRatio,
    vec2 particleLifeRange,
    vec3 particleNoiseScale,
    float flowFieldsChangingSpeed,
    float moveSpeedScaler,
    float runTime,
    float deltaTime,
    out vec4 outPosDataColor,
    out vec4 outVelosityDataColor,
    out vec4 outLifeSpeedDataColor) {

  //FRAGMENT SHADER
  vec2 dataUV = fragment(std::getVertexTexCoord());
  
  // get data from textures
  vec4 posData = posDataTexture.sample(dataUV);
  vec4 velocityData = velocityDataTexture.sample(dataUV);
  vec4 lifeSpeedData = lifeSpeedDataTexture.sample(dataUV);

  // grab data
  float lifeNow = lifeSpeedData.x;
  float lifeMax = lifeSpeedData.y;
  float speed = lifeSpeedData.z;
  float seed = dataUV.x * 255.0 + dataUV.y;

  // process life time
  lifeNow -= deltaTime;


  // Here is defines the spawn shape of the particle
  // Since when the life is <= 0, the particle's position and velocity will be reset
  // Here I made two shapes, circle and square for demostration
  if(lifeNow <= 0.0)
  {
    float lifeRandValue = random(vec2(runTime * 0.1, seed * 0.1));
    lifeMax = mix(particleLifeRange.x, particleLifeRange.y, lifeRandValue);
    lifeNow = lifeMax;

    velocityData.xyz = vec3(0.0, 0.0, 0.0);
    speed = 0.0;

    if(spawnShapeType == 0) // circle
    {
      float circleAngle = random(vec2(runTime * 0.6, seed + runTime * 0.056)) * 360.0;
      float spawnDist = random(vec2(runTime * 0.1, seed + runTime * 0.2)) * spawnThicknessRatio;
      posData.x = sin(toRad(circleAngle)) * spawnSizeValues.x * (1.0 - spawnDist);
      posData.y = cos(toRad(circleAngle)) * spawnSizeValues.y * (1.0 - spawnDist);
      posData.z = 0.0;
    }
    else // square
    {
      float xDir = random(vec2(runTime * 0.124, seed + runTime * 0.12 + 1124.0)) > 0.5 ? 1.0 : -1.0;
      float yDir = random(vec2(runTime * 0.321, seed + runTime * 0.23 + 457.0)) > 0.5 ? 1.0 : -1.0;
      int dirType = random(vec2(runTime * 0.068, seed + runTime * 0.54 + 358.0)) > 0.5 ? 1 : 0;

      float spawnDist = random(vec2(runTime * 0.1, seed + runTime * 0.2)) * spawnThicknessRatio;

      if(dirType == 0) // left right
      {
        posData.x = (random(vec2(runTime * 0.68, seed + runTime * 0.87)) - 0.5) * spawnSizeValues.x * (1.0 - spawnDist);
        posData.y = spawnSizeValues.y * yDir * 0.5 * (1.0 - spawnDist);
        posData.z = 0.0;
      }
      else
      {
        posData.x = spawnSizeValues.x * xDir * 0.5 * (1.0 - spawnDist);
        posData.y = (random(vec2(runTime * 0.68, seed + runTime * 0.87)) - 0.5) * spawnSizeValues.y * (1.0 - spawnDist);
        posData.z = 0.0;
      }
    }
  }
  else
  {
    float velNoiseValueX = posData.x * particleNoiseScale.x + 20.0;
    float velNoiseValueY = posData.y * particleNoiseScale.y + 20.0;
    float velNoiseValueZ = posData.z * particleNoiseScale.z + runTime * flowFieldsChangingSpeed;

    vec3 newVelocity = curlNoise(vec3(velNoiseValueX, velNoiseValueY, velNoiseValueZ));
    velocityData.xyz += newVelocity.xyz * moveSpeedScaler * deltaTime;
    velocityData.xyz *= 0.95;

    speed = 0.1;

    posData.x += velocityData.x * speed * deltaTime;
    posData.y += velocityData.y * speed * deltaTime;
    posData.z += velocityData.z * speed * deltaTime;
  }

  // speed, life, seed
  outPosDataColor = vec4(posData);
  outVelosityDataColor = vec4(velocityData);
  outLifeSpeedDataColor = vec4(lifeNow, lifeMax, speed, 1.0);
}
